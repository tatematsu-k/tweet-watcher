AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  tweet-watcher

Parameters:
  SlackSigningSecret:
    Type: String
  SlackBotToken:
    Type: String
  TwitterBearerToken:
    Type: String
  TwitterConsumerKey:
    Type: String
  TwitterConsumerSecret:
    Type: String
  TwitterAccessToken:
    Type: String
  TwitterAccessTokenSecret:
    Type: String

Resources:
  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SettingsTable
      AttributeDefinitions:
        - AttributeName: keyword
          AttributeType: S
        - AttributeName: slack_ch
          AttributeType: S
        - AttributeName: end_at
          AttributeType: S
      KeySchema:
        - AttributeName: keyword
          KeyType: HASH
        - AttributeName: slack_ch
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: end_at-index
          KeySchema:
            - AttributeName: end_at
              KeyType: HASH
            - AttributeName: keyword
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NotificationsTable
      AttributeDefinitions:
        - AttributeName: tweet_uid
          AttributeType: S
        - AttributeName: slack_ch
          AttributeType: S
        - AttributeName: slack_message_ts
          AttributeType: S
      KeySchema:
        - AttributeName: tweet_uid
          KeyType: HASH
        - AttributeName: slack_ch
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: slack_message_ts-index
          KeySchema:
            - AttributeName: slack_message_ts
              KeyType: HASH
            - AttributeName: tweet_uid
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  LibLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: LibLayer
      Content: lib-layer.zip
      CompatibleRuntimes:
        - python3.13
        - python3.11

  SettingsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_functions/api_gateway/settings_api.lambda_handler
      Runtime: python3.13
      CodeUri: .
      Layers:
        - !Ref LibLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          TWITTER_BEARER_TOKEN: !Ref TwitterBearerToken
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          TWITTER_ACCESS_TOKEN: !Ref TwitterAccessToken
          TWITTER_ACCESS_TOKEN_SECRET: !Ref TwitterAccessTokenSecret
      Events:
        GetSettings:
          Type: Api
          Properties:
            Path: /settings
            Method: get
        CreateSetting:
          Type: Api
          Properties:
            Path: /settings
            Method: post
        UpdateSetting:
          Type: Api
          Properties:
            Path: /settings
            Method: put
        DeleteSetting:
          Type: Api
          Properties:
            Path: /settings
            Method: delete

  BatchWatcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_functions/event_bridge/tweet_monitor_batch.lambda_handler
      Runtime: python3.11
      CodeUri: .
      Layers:
        - !Ref LibLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SettingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
      Environment:
        Variables:
          LIKE_THRESHOLD: "10"
          RETWEET_THRESHOLD: "5"
          TWITTER_BEARER_TOKEN: !Ref TwitterBearerToken
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          TWITTER_ACCESS_TOKEN: !Ref TwitterAccessToken
          TWITTER_ACCESS_TOKEN_SECRET: !Ref TwitterAccessTokenSecret
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)

  NotifySlackFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_functions/dynamodb_stream/notify_slack_stream.lambda_handler
      Runtime: python3.11
      CodeUri: .
      Layers:
        - !Ref LibLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        # Slack通知用の外部APIアクセス権限が必要なら追加
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: ""
          NOTIFICATIONS_TABLE: !Ref NotificationsTable
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          TWITTER_BEARER_TOKEN: !Ref TwitterBearerToken
          TWITTER_CONSUMER_KEY: !Ref TwitterConsumerKey
          TWITTER_CONSUMER_SECRET: !Ref TwitterConsumerSecret
          TWITTER_ACCESS_TOKEN: !Ref TwitterAccessToken
          TWITTER_ACCESS_TOKEN_SECRET: !Ref TwitterAccessTokenSecret
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt NotificationsTable.StreamArn
            StartingPosition: LATEST
