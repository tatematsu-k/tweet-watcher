AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  tweet-watcher

Parameters:
  SlackSigningSecret:
    Type: String
  SlackBotToken:
    Type: String
  TwitterBearerToken:
    Type: String

Resources:
  TweetWacherSettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TweetWacherSettingsTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: publication_status
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: publication_status-index
          KeySchema:
            - AttributeName: publication_status
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  TweetWacherNotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TweetWacherNotificationsTable
      AttributeDefinitions:
        - AttributeName: tweet_uid
          AttributeType: S
        - AttributeName: slack_ch
          AttributeType: S
        - AttributeName: slack_message_ts
          AttributeType: S
      KeySchema:
        - AttributeName: tweet_uid
          KeyType: HASH
        - AttributeName: slack_ch
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      GlobalSecondaryIndexes:
        - IndexName: slack_message_ts-index
          KeySchema:
            - AttributeName: slack_message_ts
              KeyType: HASH
            - AttributeName: tweet_uid
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  LibLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: LibLayer
      Content: lib-layer.zip
      CompatibleRuntimes:
        - python3.13
        - python3.11

  SettingsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_functions/api_gateway/settings_api.lambda_handler
      Runtime: python3.13
      CodeUri: .
      Layers:
        - !Ref LibLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetWacherSettingsTable
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TweetWacherSettingsTable}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TweetWacherSettingsTable}/index/publication_status-index
      Environment:
        Variables:
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          TWITTER_BEARER_TOKEN: !Ref TwitterBearerToken
      Events:
        GetSettings:
          Type: Api
          Properties:
            Path: /settings
            Method: get
        CreateSetting:
          Type: Api
          Properties:
            Path: /settings
            Method: post
        UpdateSetting:
          Type: Api
          Properties:
            Path: /settings
            Method: put
        DeleteSetting:
          Type: Api
          Properties:
            Path: /settings
            Method: delete

  BatchWatcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_functions/event_bridge/tweet_monitor_batch.lambda_handler
      Runtime: python3.11
      CodeUri: .
      Layers:
        - !Ref LibLayer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TweetWacherSettingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetWacherNotificationsTable
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TweetWacherSettingsTable}
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TweetWacherSettingsTable}/index/publication_status-index
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:Scan
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TweetWacherXCredentialSettingsTable}
      Environment:
        Variables:
          LIKE_THRESHOLD: "5"
          RETWEET_THRESHOLD: "1"
          TWITTER_BEARER_TOKEN: !Ref TwitterBearerToken
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)

  NotifySlackFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_functions/dynamodb_stream/notify_slack_stream.lambda_handler
      Runtime: python3.11
      CodeUri: .
      Layers:
        - !Ref LibLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetWacherNotificationsTable
        # Slack通知用の外部APIアクセス権限が必要なら追加
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: ""
          NOTIFICATIONS_TABLE: !Ref TweetWacherNotificationsTable
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          TWITTER_BEARER_TOKEN: !Ref TwitterBearerToken
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TweetWacherNotificationsTable.StreamArn
            StartingPosition: LATEST
